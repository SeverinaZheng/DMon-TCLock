struct time_stat{
	unsigned long min;
	unsigned long max;
	unsigned long total;
};

struct data_t{
	/* User-defined additional data */
	unsigned long prev_cpu;

	/* lock_to_enter_slow_path */
	unsigned long contentions;
	unsigned long con_bounces;
	struct time_stat waittime;

	/* lock_acquired */
	unsigned long acquisitions;
	unsigned long acq_bounces;
	struct time_stat holdtime;

};

struct bpf_map_def SEC("maps") hash_map = {
	.type = BPF_MAP_TYPE_HASH,
	.key_size = sizeof(unsigned long),
	.value_size = sizeof(struct data_t),
	.max_entries = 10000,
};

SEC("lock_qspinlock_global")
int custom_lock_contended(struct __lock_policy_args *args)
{
	unsigned long key = args->lock_ptr;
	struct data_t *data_ptr;
	data_ptr = bpf_map_lookup_elem(&hash_map, &key);

	if(!data_ptr){
		// data still not there; let's just skip this round
		bpf_printk("skip this turn\n");
		return 0;
	}

	data_ptr->contentions++;
	args->per_cpu_data = bpf_ktime_get_ns();

	return 0;
}
